import babel from '@rollup/plugin-babel';
import resolve from '@rollup/plugin-node-resolve';
import commonjs from '@rollup/plugin-commonjs';

import { terser } from 'rollup-plugin-terser';
import visualizer from 'rollup-plugin-visualizer';

const resolvePlugin = resolve({
	mainFields: ['module', 'main'],
	extensions: ['.js', '.json']
});

const babelPlugin = babel({
	babelHelpers: 'runtime',
	skipPreflightCheck: true,
	extensions: ['.js'],
	// prevents babel from modifying sourcemap generated by rollup
	inputSourceMap: false
});

export default [
	/**
	 * CJS is short for CommonJS
	 * This would work for backend.
	 */
	// CJS
	{
		input: 'bin/cli.js',
		output: {
			file: 'dist/bundle.cjs.js',
			format: 'cjs',
			sourcemap: true,
			strict: false,
			banner: '#! /usr/bin/env node\n',
			exports: 'named'
		},
		plugins: [
			resolvePlugin,
			babelPlugin,
			commonjs(),
			terser(),
			visualizer({
				filename: 'dist/bundle-visualizer-cjs.html'
			})
		],
		/**
		 * In case of the following warning
		 *
		 * Plugin node-resolve: Could not resolve import ... in ... is not defined by "exports" in undefined
		 * Plugin node-resolve: Could not resolve import "undefined" in ".". Package subpath ... is not defined by "exports" in undefined
		 * Unresolved dependencies
		 *
		 * Add the external package to this list.
		 */
		external: [
			'child_process',
			'fs',
			'path',
			'os',
			'https',
			'readline',
			'zlib',
			'events',
			'stream',
			'util',
			'buffer',
			'yargs'
		]
	}
];
